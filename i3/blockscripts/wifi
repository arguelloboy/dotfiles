#!/bin/bash

# Get interface
IF=$(ip route | awk '/^default/ { print $5 ; exit }')
# Exit if no wifi
[[ ! -d /sys/class/net/${IF} ]] && exit
# Check if down, if it is, then display "down"
if [[ "$(cat /sys/class/net/$IF/operstate)" = 'down' ]]; then
  echo down # full text
  echo down # short text
  echo \#FF0000 # color
  exit
fi
# Do some more stuff
case $1 in
  -4)
    AF=inet ;;
  -6)
    AF=inet6 ;;
  *)
    AF=inet6? ;;
esac
# if no interface is found, use the first device with a global scope
IPADDR=$(ip addr show $IF | perl -n -e "/$AF ([^\/]+).* scope global/ && print \$1 and exit")

# Bandwith

[[ -z $INLABEL ]] && INLABEL=" "
[[ -z $OUTLABEL ]] && OUTLABEL=" "

# Use the provided interface, otherwise the device used for the default route.
INTERFACE=$(ip route | awk '/^default/ { print $5 ; exit }')

# path to store the old results in
path="/dev/shm/$(basename $0)-${INTERFACE}"

# grabbing data for each adapter.
read rx < "/sys/class/net/${INTERFACE}/statistics/rx_bytes"
read tx < "/sys/class/net/${INTERFACE}/statistics/tx_bytes"

# get time
time=$(date +%s)

# write current data if file does not exist. Do not exit, this will cause
# problems if this file is sourced instead of executed as another process.
if ! [[ -f "${path}" ]]; then
  echo "${time} ${rx} ${tx}" > "${path}"
  chmod 0666 "${path}"
fi

# read previous state and update data storage
read old < "${path}"
echo "${time} ${rx} ${tx}" > "${path}"

# parse old data and calc time passed
old=(${old//;/ })
time_diff=$(( $time - ${old[0]} ))

# sanity check: has a positive amount of time passed
[[ "${time_diff}" -gt 0 ]] || exit

# calc bytes transferred, and their rate in byte/s
rx_diff=$(( $rx - ${old[1]} ))
tx_diff=$(( $tx - ${old[2]} ))
rx_rate=$(( $rx_diff / $time_diff ))
tx_rate=$(( $tx_diff / $time_diff ))

# shift by 10 bytes to get KiB/s. If the value is larger than
# 1024^2 = 1048576, then display MiB/s instead

# incoming
echo -n "$INLABEL"
rx_kib=$(( $rx_rate >> 10 ))
if [[ "$rx_rate" -gt 1048576 ]]; then
  printf '%sM' "`echo "scale=1; $rx_kib / 1024" | bc`"
else
  echo -n "${rx_kib}K"
fi

echo -n " "

# outgoing
echo -n "$OUTLABEL"
tx_kib=$(( $tx_rate >> 10 ))
if [[ "$tx_rate" -gt 1048576 ]]; then
  printf '%sM' "`echo "scale=1; $tx_kib / 1024" | bc`"
else
  echo -n "${tx_kib}K"
fi


INTERFACE="${BLOCK_INSTANCE:-wlan0}"
[[ ! -d /sys/class/net/${INTERFACE}/wireless ]] ||
    [[ "$(cat /sys/class/net/$INTERFACE/operstate)" = 'down' ]] && exit
QUALITY=$(grep $INTERFACE /proc/net/wireless | awk '{ print int($3 * 100 / 70) }')

EXTERNALIP=`curl -s ipinfo.io/ip`

NAME=$(iwgetid -r)
for i in {1..2}; do
    echo " $NAME ($IPADDR/$EXTERNALIP) $QUALITY%" # full text
done

if [[ $QUALITY -lt 70 ]]; then
    echo "#006298"
elif [[ $QUALITY -lt 40 ]]; then
    echo "#FF0000"
fi
