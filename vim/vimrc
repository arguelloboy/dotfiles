"==> Vundle
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Plugins go here
Plugin 'VundleVim/Vundle.vim'

" Languages
Plugin 'scrooloose/syntastic'
Plugin 'nvie/vim-flake8'
Plugin 'davidhalter/jedi-vim'

" Custom motions
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-commentary'

" Hardtime :D
Plugin 'takac/vim-hardtime'

" Color theme
Plugin 'Lokaltog/vim-distinguished'

" Ultisnips
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'

call vundle#end()
filetype plugin indent on
"<==
"==> Options
syntax enable 
set history=500
set so=7

set wildmenu
set wildignore=*.o,*~,*.pyc,*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store

set cmdheight=1
set backspace=eol,indent
set whichwrap=h,l
set ignorecase
set smartcase
set hlsearch
set incsearch 
set lazyredraw 
set showmatch 
set noerrorbells
set tm=1000
set foldcolumn=1
set encoding=utf8
set nobackup
set nowb
set noswapfile
set expandtab
set smarttab
set shiftwidth=4
set tabstop=4
set laststatus=2
set relativenumber
set number
set gdefault
set showcmd
set clipboard=unnamed
set mouse=nvc
"<==
"==> Maps
" Window movement
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-h> <C-W>h
map <C-l> <C-W>l

" Escaping from insert
inoremap jk <Esc>
inoremap kj <Esc>
inoremap <Esc> <Nop>

" Leader
let g:mapleader = ","

" Remove highlights from search
nmap <silent> <leader><cr> :noh<cr>
" Close current buffer and its containing tab
nmap <leader>bd :Bclose<cr>:tabclose<cr>gT
" Open vimrc
nmap <leader>e :e ~/.vimrc<cr>
" Save
nmap <leader>w :w<cr>

" Commands / functions
map <leader><leader> :Encrypt<cr>
nnoremap <expr> <leader>q OpenTmp()

" Swapping 0 and ^, I like more the ^ functionality and 0 is easier to hit
nnoremap 0 ^
nnoremap ^ 0

" Run current program with python
nnoremap <leader>p  :!python3 %<cr>
nnoremap <leader>p3 :!python3 %<cr>
nnoremap <leader>p2 :!python2 %<cr>
nnoremap <leader>pp :!python3 % 
" pp in case I need arguments,
" Notice the trailing space before EOL and lack of <cr>
"<==
"==> Autocmds and cmds
" Highlights trailing spaces
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

command! Encrypt normal ggg?G``ggg~G``
command! Bclose call <SID>BufcloseCloseIt()

au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif " Return to last edit position when opening files
"<==
"==> Functions
" Close buffer
function! <SID>BufcloseCloseIt()
   let l:currentBufNum = bufnr("%")
   let l:alternateBufNum = bufnr("#")

   if buflisted(l:alternateBufNum)
     buffer #
   else
     bnext
   endif

   if bufnr("%") == l:currentBufNum
     new
   endif

   if buflisted(l:currentBufNum)
     execute("bdelete! ".l:currentBufNum)
   endif
endfunction

" Open a temporary file using mktemp
function! OpenTmp()
    return ":e" . system("mktemp") . "\n"
endfunc
"<==
"==> HardTime
let g:hardtime_allow_different_key = 1
let g:hardtime_default_on = 1
let g:list_of_disabled_keys = ["<UP>", "<DOWN>", "<LEFT>", "<RIGHT>"]
"<==
"==> Colorscheme
set background=dark
colorscheme distinguished
"<==
"==> UltiSnips
" Settings
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetsDir="~/.vim/UltiSnips"

" Automatic filetype for vim
autocmd BufRead ~/.vimrc UltiSnipsAddFiletypes vimrc.vim
"<==
"==> Deoplete
let g:deoplete#enable_at_startup = 1
"<==

" vim:foldmethod=marker:foldmarker=\=\=>,<\=\=:
